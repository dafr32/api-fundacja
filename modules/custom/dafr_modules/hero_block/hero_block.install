<?php

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\block_content\Entity\BlockContentType;

/**
 * Implements hook_install().
 */
function hero_block_install() {
    // Tworzenie typu zawartości blokowej, jeśli nie istnieje.
    $block_content_type = BlockContentType::load('hero_block');
    if (!$block_content_type) {
        $block_content_type = BlockContentType::create([
            'id' => 'hero_block',
            'label' => 'Hero block',
        ]);
        $block_content_type->save();
    }

    // Definicja pól.
    $fields = [
        'field_title' => [
            'label' => 'Title',
            'type' => 'string',
        ],
        'field_subtitle' => [
            'label' => 'Subtitle',
            'type' => 'string',
        ],
        'field_body' => [
            'label' => 'Body',
            'type' => 'text_long',
        ],
        'field_icon' => [
            'label' => 'Ikona',
            'type' => 'text_long',
        ],
        'field_bg_color' => [
            'label' => 'Background color',
            'type' => 'string',
        ],
        'field_bg_image' => [
            'label' => 'Background Image',
            'description' => 'The URL for the image.',
            'type' => 'image',
            'settings' => [
                'uri_scheme' => 'public',
                'file_directory' => 'images',
                'max_resolution' => '3000x3000',                
                'alt_field_required' => FALSE,
            ],
        ],
		'field_video' => [
            'label' => 'Video link',
            'type' => 'string',
        ],
        'field_button_link' => [
            'label' => 'Button Link',
            'type' => 'link',
        ],
        'field_type' => [
            'label' => 'Typ bloku',
            'type' => 'list_string',
            'settings' => [
                'allowed_values' => [
                    'background-image' => 'background-image',
					'background-image' => 'background-video',
                    'background-color' => 'background-color',
                ],
            ],
        ],
        'field_align' => [
            'label' => 'Wyrównanie tekstu',
            'type' => 'list_string',
            'settings' => [
                'allowed_values' => [
                    'left' => 'left',
                    'center' => 'center',
                    'right' => 'right',                    
                ],
            ],
        ],
        'field_valign' => [
            'label' => 'Wyrównanie w pionie',
            'type' => 'list_string',
            'settings' => [
                'allowed_values' => [
                    'top' => 'top',
                    'middle' => 'middle',
                    'bottom' => 'bottom',
                ],
            ],
        ],
        'field_parallax' => [
            'label' => 'Parallax',
            'type' => 'boolean',
        ],
    ];

    foreach ($fields as $field_name => $field_info) {
        // Sprawdzenie, czy istnieje konfiguracja przechowywania pól.
        $field_storage_exists = (bool) FieldStorageConfig::loadByName('block_content', $field_name);

        if (!$field_storage_exists) {
            // Tworzenie konfiguracji przechowywania pól.
            $field_storage = FieldStorageConfig::create([
                'field_name' => $field_name,
                'entity_type' => 'block_content',
                'type' => $field_info['type'],
                'settings' => isset($field_info['settings']) ? $field_info['settings'] : [],
            ]);
            $field_storage->save();
        }

        // Tworzenie konfiguracji instancji pola, jeśli nie istnieje.
        $field_instance_exists = (bool) FieldConfig::loadByName('block_content', 'hero_block', $field_name);

        if (!$field_instance_exists) {
            $field_instance = FieldConfig::create([
                'field_name' => $field_name,
                'entity_type' => 'block_content',
                'bundle' => 'hero_block',
                'label' => $field_info['label'],
                'description' => isset($field_info['description']) ? $field_info['description'] : '',
                'settings' => isset($field_info['settings']) ? $field_info['settings'] : [],
            ]);
            $field_instance->save();
        }
    }

    // Ustawienie wyświetlania formularza.
    $form_display = EntityFormDisplay::load('block_content.hero_block.default');
    if (!$form_display) {
        $form_display = EntityFormDisplay::create([
            'targetEntityType' => 'block_content',
            'bundle' => 'hero_block',
            'mode' => 'default',
            'status' => TRUE,
        ]);
    }

    // Ustawienie komponentów formularza z odpowiednimi wagami.
    $field_weights = [
        'field_title' => 0,
        'field_subtitle' => 1,        
        'field_body' => 2,
        'field_bg_color' => 3,
        'field_bg_image' => 4,
		'field_video' => 5,
        'field_button_link' => 6,        
        'field_type' => 7,
        'field_align' => 8,
        'field_valign' => 9,
        'field_icon' => 10,
        'field_parallax' => 11,
    ];

    foreach ($fields as $field_name => $field_info) {
        $form_display->setComponent($field_name, [
            'type' => 'text_textfield', // Domyślny typ pola formularza
            'weight' => $field_weights[$field_name],
        ]);
    }
    $form_display->save();

    // Aktualizacja ustawień wyświetlania w celu ukrycia etykiet pól.
    $view_modes = ['default'];
    foreach ($view_modes as $view_mode) {
        $display = EntityViewDisplay::load("block_content.hero_block.$view_mode");
        if (!$display) {
            $display = EntityViewDisplay::create([
                'targetEntityType' => 'block_content',
                'bundle' => 'hero_block',
                'mode' => $view_mode,
                'status' => TRUE,
            ]);
        }

        foreach (array_keys($fields) as $field_name) {
            $display->setComponent($field_name, [
                'label' => 'hidden',
                'type' => 'string',
            ]);
        }

        $display->save();
    }
}

/**
 * Implements hook_uninstall().
 */
function hero_block_uninstall() {
    // Załadowanie i usunięcie typu zawartości blokowej, jeśli istnieje.
    $block_content_type = BlockContentType::load('hero_block');
    if ($block_content_type) {
        $block_content_type->delete();
    }

    // Definicja pól do usunięcia.
    $fields_to_delete = [
        'field_title',
        'field_subtitle',
        'field_body',
        'field_bg_color',
        'field_bg_image',
		'field_video',
        'field_button_link',
        'field_type',
        'field_align',
        'field_valign',        
        'field_icon',
        'field_parallax',
    ];

    foreach ($fields_to_delete as $field_name) {
        // Sprawdzenie, czy instancja pola jest używana przez jakiś blok.
        $field_instance = FieldConfig::loadByName('block_content', 'hero_block', $field_name);
        if ($field_instance) {
            // Pobranie listy bloków używających tego pola.
            $query = \Drupal::entityQuery('block_content')
                ->condition('type', 'hero_block')
                ->condition('status', 1) // Tylko aktywne bloki.
                ->exists($field_name); // Sprawdzenie, czy pole nie jest puste.

            $block_count = $query->count()->execute();

            // Jeśli żaden blok nie używa tego pola, usuń jego konfigurację.
            if ($block_count === 0) {
                $field_instance->delete();

                // Usunięcie konfiguracji przechowywania pola, jeśli istnieje.
                $field_storage = FieldStorageConfig::loadByName('block_content', $field_name);
                if ($field_storage) {
                    $field_storage->delete();
                }
            }
        }
    }
}
